//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Grid"",
            ""id"": ""0491c34f-d309-486e-841a-f32d93e5cd61"",
            ""actions"": [
                {
                    ""name"": ""Route"",
                    ""type"": ""Value"",
                    ""id"": ""8eb68cd1-b18c-4108-9de2-172e93fc1cd6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EndRoute"",
                    ""type"": ""Button"",
                    ""id"": ""c1be8cf9-81ee-4619-9ebe-49faad463e39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e971e7a8-d0d0-406a-aa8a-f34c61efc29f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Route"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c1e6966f-0183-4e3c-b7c0-586a3f1af16c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Route"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d928006b-26cb-4ddc-9673-fd30c3ecc0b2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Route"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b314d9b7-4414-4368-8349-22511472e930"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Route"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7ad237e4-475e-47ae-afc2-b3dffd747add"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Route"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""257c41c5-4aa9-4394-ab1c-e7f155b6fa37"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Route"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""974124de-d399-48ad-965c-c3c6fe5408db"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Route"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55dfd50a-d03a-4775-949f-5776f1630d91"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndRoute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Selection"",
            ""id"": ""1b0d2718-7f30-4381-a0b7-4c4b43975008"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""1bdc2e49-6715-41f6-a5e6-73137aa4ec2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""3bfccf79-93b1-4620-85ec-1b9349c231f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""5810a9c4-efec-4cd1-b10f-0b8549f58319"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ccd92e7-66df-4ff0-955f-4a62007a4750"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fcd5d5b-252a-41fa-a935-0d9050231a19"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fb4c55f-fd25-4ce7-b5d5-0a932df1f054"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Grid
        m_Grid = asset.FindActionMap("Grid", throwIfNotFound: true);
        m_Grid_Route = m_Grid.FindAction("Route", throwIfNotFound: true);
        m_Grid_EndRoute = m_Grid.FindAction("EndRoute", throwIfNotFound: true);
        // Selection
        m_Selection = asset.FindActionMap("Selection", throwIfNotFound: true);
        m_Selection_Up = m_Selection.FindAction("Up", throwIfNotFound: true);
        m_Selection_Down = m_Selection.FindAction("Down", throwIfNotFound: true);
        m_Selection_Select = m_Selection.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grid
    private readonly InputActionMap m_Grid;
    private IGridActions m_GridActionsCallbackInterface;
    private readonly InputAction m_Grid_Route;
    private readonly InputAction m_Grid_EndRoute;
    public struct GridActions
    {
        private @InputActions m_Wrapper;
        public GridActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Route => m_Wrapper.m_Grid_Route;
        public InputAction @EndRoute => m_Wrapper.m_Grid_EndRoute;
        public InputActionMap Get() { return m_Wrapper.m_Grid; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GridActions set) { return set.Get(); }
        public void SetCallbacks(IGridActions instance)
        {
            if (m_Wrapper.m_GridActionsCallbackInterface != null)
            {
                @Route.started -= m_Wrapper.m_GridActionsCallbackInterface.OnRoute;
                @Route.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnRoute;
                @Route.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnRoute;
                @EndRoute.started -= m_Wrapper.m_GridActionsCallbackInterface.OnEndRoute;
                @EndRoute.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnEndRoute;
                @EndRoute.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnEndRoute;
            }
            m_Wrapper.m_GridActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Route.started += instance.OnRoute;
                @Route.performed += instance.OnRoute;
                @Route.canceled += instance.OnRoute;
                @EndRoute.started += instance.OnEndRoute;
                @EndRoute.performed += instance.OnEndRoute;
                @EndRoute.canceled += instance.OnEndRoute;
            }
        }
    }
    public GridActions @Grid => new GridActions(this);

    // Selection
    private readonly InputActionMap m_Selection;
    private ISelectionActions m_SelectionActionsCallbackInterface;
    private readonly InputAction m_Selection_Up;
    private readonly InputAction m_Selection_Down;
    private readonly InputAction m_Selection_Select;
    public struct SelectionActions
    {
        private @InputActions m_Wrapper;
        public SelectionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Selection_Up;
        public InputAction @Down => m_Wrapper.m_Selection_Down;
        public InputAction @Select => m_Wrapper.m_Selection_Select;
        public InputActionMap Get() { return m_Wrapper.m_Selection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectionActions set) { return set.Get(); }
        public void SetCallbacks(ISelectionActions instance)
        {
            if (m_Wrapper.m_SelectionActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_SelectionActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_SelectionActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_SelectionActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_SelectionActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_SelectionActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_SelectionActionsCallbackInterface.OnDown;
                @Select.started -= m_Wrapper.m_SelectionActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_SelectionActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_SelectionActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_SelectionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public SelectionActions @Selection => new SelectionActions(this);
    public interface IGridActions
    {
        void OnRoute(InputAction.CallbackContext context);
        void OnEndRoute(InputAction.CallbackContext context);
    }
    public interface ISelectionActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
}
